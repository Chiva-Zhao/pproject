# 给函数参数增加元信息
# 你写好了一个函数，然后想为这个函数的参数增加一些额外的信息，这样的话其他
# 使用者就能清楚的知道这个函数应该怎么使用
# 使用函数参数注解是一个很好的办法，它能提示程序员应该怎样正确使用这个函
# 数。例如，下面有一个被注解了的函数

def add(x: int, y: int) -> int:
    return x + y


# python 解释器不会对这些注解添加任何的语义。它们不会被类型检查，运行时跟
# 没有加注解之前的效果也没有任何差距。然而，对于那些阅读源码的人来讲就很有帮
# 助啦。第三方工具和框架可能会对这些注解添加语义。同时它们也会出现在文档中
print(help(add))
# 函数注解只存储在函数的 annotations 属性中
print(add.__annotations__)
# 尽管注解的使用方法可能有很多种，但是它们的主要用途还是文档
